src -> this contains our source code
controllers -> this contains our logic for health check routes  (eg responding with server status)
 like healthcheck.controllers 

 db/ -> index.js -> this is our db connection file
 models -> this contains our models for our database and ORMs like Mongoose 

 ORM full form is Object Relational Mapping
 ORM is a technique that allows us to map our database tables to objects in our code

 middlewares/ : Directory for our middlewares for request response middleware authentication
 logging etc. 

 routes/ : Directory for our routes for our application
  like : Defines the API endpoints relating to system health and links routes to controller logic. healthcheck.routes
 
 utils/: 

 ApiError.js: Custom error handling logic.

ApiResponse.js: Standardizes API responses.

asyncHandler.js: Utility to handle async errors in route handlers (avoiding repetitive try/catch).

install mongoose aggregate paginate

Some details on access and refresh tokens:

Both of them are generated on server level 
we take the refresh token and we put that value in the database for now
in generateAccessAndRefreshToken we store it in the user model 

from server we are assigning to user access token (like 15min)
and refresh token (like 1 day)

but when you delete the refresh token from db it will make the user refresh
token useless because it cant match it  

since access token is short lived used would need to log in again and again
which would be annoying so instead,

once access -> 0, we send 401 to user, which will then cause the server to use

/reftoken route which would freshly generate two refresh and access tokens,
now the refresh token would be copied to db (new one) and refresh token and access token would be sent to user again


for logging out simply log out and delete the refresh token from db


when user sends a req like logout , server needs to know who the user is, you can decode
using controller(route handler) but you need to repeat the same code again and again,

eg. actions like viewing profile making payment etc..

middleware will automatically grab access token from req.cookies or header
decode and verify it and extract the userId and attach it to req object

now when req goes to controller you dont have to repeat the code again and again

When making API requests (using tools like Postman)
Authorization: Bearer <your_jwt_token>
Postman streamlines this: if you select "Bearer Token"
 in the Authorization tab, it formats this header automatically.

 // userSchema.pre("save")
in model for user is kinda like a middleware because it checks
if the pw is modified, if it is it hashes it and saves it to db

   //validateBeforeSave option in Mongoose determines whether 
    // schema validation is automatically performed before 
    // saving a document to the database

    //findByIdAndUpdate mongoose operations where find and update is done 
    as one atomic operation for efficiency, 

   const user = await User.findByIdAndUpdate(
  userId,
  { name: "New Name" },
  { new: true }
);

we find user id, then assign the new value and update, then we return
the updated document , only doc with matching ID is updated. 

-- Login is working because Log in working kind of  all this time I was trying to send wrong data , I should send it in Json format
Register expects form data and log in expects json